package main

import "fmt"

var S = fmt.Println
var Q = fmt.Printf

// node of representace linkedlist 
type node struct {
  name string
  prev *node
  n *node
  key interface{}
  lenght int
  date int
}

// liststruct
type linkedList struct {
  h *node 
  t *node
}

// linkedList Insert interface
func (L *linkedList) Insert(key interface{}) {
  list := &node {
    n: L.h,
    key: key,
  }
  if L.h != nil {
    L.h.prev = list
  }
  L.h = list 
  
  l := L.h
  for l.n != nil {
    l = l.n
  }
  L.t = l
}

func display(list *node) {
  for list != nil {
    Q("%d —>", list.key)
    list = list.n
  }
  fmt.Print()
}

func (L *linkedList) display() {
  list := L.h
  for list != nil {
    Q("%d —>", list.key)
    list = list.n
  }
  fmt.Print()
}

func deleteWithValue(list *node) {
  for list != nil {
    Q("%d <—", list.key)
    list = list.prev
  }
  fmt.Print()
}

func (L *linkedList) reverse() {
 curr := L.h
 var prev *node
 L.t = L.h
 
 for curr != nil {
   n := curr.n
   curr.n = prev
   prev = curr
   curr = n
 }
 L.h = prev
 display(L.h)
}

func main() {
  fmt.Println("Program Sederhana linkList")
  link := linkedList{}
  link.Insert(4) 
  link.Insert(18)
  link.Insert(20)
  link.Insert(25)
  link.Insert(45)
  link.Insert(60)
  
  S("================================")
  S("\nhead: \n", link.h.key)
  S("\ntail: \n", link.t.key)
  S("\n\n")
  link.display()
  S("\n================================\n")
  S("\nhead: \n", link.h.key)
  S("\ntail: \n", link.t.key)
  S("\n\n")
  link.reverse()
  S("\n================================\n")
}
